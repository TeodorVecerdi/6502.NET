namespace Emulator;

public static class InstructionKindExtensions {
    public static string ToMnemonic(this InstructionKind instructionKind) {
        return instructionKind switch {
            InstructionKind.LDA => "LDA (Load Accumulator)",
            InstructionKind.LDX => "LDX (Load X Register)",
            InstructionKind.LDY => "LDY (Load Y Register)",
            InstructionKind.STA => "STA (Store Accumulator)",
            InstructionKind.STX => "STX (Store X Register)",
            InstructionKind.STY => "STY (Store Y Register)",
            InstructionKind.TAX => "TAX (Transfer Accumulator to X)",
            InstructionKind.TAY => "TAY (Transfer Accumulator to Y)",
            InstructionKind.TXA => "TXA (Transfer X to Accumulator)",
            InstructionKind.TYA => "TYA (Transfer Y to Accumulator)",
            InstructionKind.TSX => "TSX (Transfer Stack Pointer to X)",
            InstructionKind.TXS => "TXS (Transfer X to Stack Pointer)",
            InstructionKind.PHA => "PHA (Push Accumulator)",
            InstructionKind.PHP => "PHP (Push Processor Status)",
            InstructionKind.PLA => "PLA (Pull Accumulator)",
            InstructionKind.PLP => "PLP (Pull Processor Status)",
            InstructionKind.AND => "AND (Logical AND)",
            InstructionKind.EOR => "EOR (Exclusive OR)",
            InstructionKind.ORA => "ORA (Logical OR)",
            InstructionKind.BIT => "BIT (Bit Test)",
            InstructionKind.ADC => "ADC (Add with Carry)",
            InstructionKind.SBC => "SBC (Subtract with Carry)",
            InstructionKind.CMP => "CMP (Compare Accumulator)",
            InstructionKind.CPX => "CPX (Compare X Register)",
            InstructionKind.CPY => "CPY (Compare Y Register)",
            InstructionKind.INC => "INC (Increment a memory location)",
            InstructionKind.INX => "INX (Increment X Register)",
            InstructionKind.INY => "INY (Increment Y Register)",
            InstructionKind.DEC => "DEC (Decrement a memory location)",
            InstructionKind.DEX => "DEX (Decrement X Register)",
            InstructionKind.DEY => "DEY (Decrement Y Register)",
            InstructionKind.ASL => "ASL (Arithmetic Shift Left)",
            InstructionKind.LSR => "LSR (Logical Shift Right)",
            InstructionKind.ROL => "ROL (Rotate Left)",
            InstructionKind.ROR => "ROR (Rotate Right)",
            InstructionKind.JMP => "JMP (Jump to New Location)",
            InstructionKind.JSR => "JSR (Jump to Subroutine)",
            InstructionKind.RTS => "RTS (Return from Subroutine)",
            InstructionKind.BCC => "BCC (Branch on Carry Clear)",
            InstructionKind.BCS => "BCS (Branch on Carry Set)",
            InstructionKind.BEQ => "BEQ (Branch on Zero Set)",
            InstructionKind.BMI => "BMI (Branch on Negative Set)",
            InstructionKind.BNE => "BNE (Branch on Zero Clear)",
            InstructionKind.BPL => "BPL (Branch on Negative Clear)",
            InstructionKind.BVC => "BVC (Branch on Overflow Clear)",
            InstructionKind.BVS => "BVS (Branch on Overflow Set)",
            InstructionKind.CLC => "CLC (Clear Carry Flag)",
            InstructionKind.CLD => "CLD (Clear Decimal Mode)",
            InstructionKind.CLI => "CLI (Clear Interrupt Flag)",
            InstructionKind.CLV => "CLV (Clear Overflow Flag)",
            InstructionKind.SEC => "SEC (Set Carry Flag)",
            InstructionKind.SED => "SED (Set Decimal Mode)",
            InstructionKind.SEI => "SEI (Set Interrupt Flag)",
            InstructionKind.BRK => "BRK (Force Break)",
            InstructionKind.NOP => "NOP (No Operation)",
            InstructionKind.RTI => "RTI (Return from Interrupt)",
            _ => throw new NotImplementedException(),
        };
    }
}